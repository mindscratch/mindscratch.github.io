<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on craig wickesser </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://yourSiteHere/categories/posts/index.xml/</link>
    <language>en-us</language>
    <author>Craig Wickesser</author>
    
    <updated>Wed, 21 Jan 2015 00:00:00 UTC</updated>
    
    <item>
      <title>Mindscratch Newsletter 1</title>
      <link>http://yoursitehere/2015/01/mindscratch-newsletter-1/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 UTC</pubDate>
      <author>Craig Wickesser</author>
      <guid>http://yoursitehere/2015/01/mindscratch-newsletter-1/</guid>
      <description>&lt;p&gt;On a regular basis, hopefully once per week, I&amp;rsquo;ll be posting links to
content related to distributed systems, programming and devops. If you&amp;rsquo;d prefer
to access this content via email, then &lt;a href=&#34;/subscribe&#34;&gt;subscribe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/Apache-Mesos-NYC-Meetup/events/219073804/&#34;&gt;http://www.meetup.com/Apache-Mesos-NYC-Meetup/events/219073804/&lt;/a&gt;
  - interesting b/c of  mention of running Accumulo on Mesos&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/ColleenLee1/iguaz-a-longrunning-job-scheduler-using-docker-and-mesos&#34;&gt;http://www.slideshare.net/ColleenLee1/iguaz-a-longrunning-job-scheduler-using-docker-and-mesos&lt;/a&gt;
  - job scheduler from corsera&lt;/p&gt;

&lt;p&gt;Docker security
&lt;a href=&#34;https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines&#34;&gt;https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines&lt;/a&gt;
&lt;a href=&#34;https://www.gartner.com/doc/2956826&#34;&gt;https://www.gartner.com/doc/2956826&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ExPHAT/twitter-sort&#34;&gt;https://github.com/ExPHAT/twitter-sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://am./chronos&#34;&gt;http://am./chronos&lt;/a&gt; &amp;ndash;master zk://server1:2181/mesos &amp;ndash;zk_hosts zk://server1:2181/mesos &amp;ndash;http_port 8080bari.apache.org/&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jpetazzo.github.io/2015/01/13/docker-mount-dynamic-volumes/&#34;&gt;http://jpetazzo.github.io/2015/01/13/docker-mount-dynamic-volumes/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://codeascraft.com/2015/01/14/introducing-statsd-jvm-profiler-a-jvm-profiler-for-hadoop/&#34;&gt;https://codeascraft.com/2015/01/14/introducing-statsd-jvm-profiler-a-jvm-profiler-for-hadoop/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go
Go Static Analysis Tools by Alan Donovan &lt;a href=&#34;https://vimeo.com/116108566&#34;&gt;https://vimeo.com/116108566&lt;/a&gt;
Benchmarking Go &lt;a href=&#34;https://vimeo.com/114975899&#34;&gt;https://vimeo.com/114975899&lt;/a&gt;
7 common mistakes in go and how to avoid them &lt;a href=&#34;https://vimeo.com/115776445&#34;&gt;https://vimeo.com/115776445&lt;/a&gt;
cancellation, context and plumbing &lt;a href=&#34;https://vimeo.com/115309491&#34;&gt;https://vimeo.com/115309491&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Io.js
&lt;a href=&#34;https://www.youtube.com/watch?v=DqMFX91ToLw&#34;&gt;https://www.youtube.com/watch?v=DqMFX91ToLw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ecmascript 7 async &amp;ndash; the evolution of javascript - &lt;a href=&#34;https://www.youtube.com/watch?v=DqMFX91ToLw&#34;&gt;https://www.youtube.com/watch?v=DqMFX91ToLw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://opensource.com/business/15/1/apache-spark-new-world-record&#34;&gt;http://opensource.com/business/15/1/apache-spark-new-world-record&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://events.linuxfoundation.org/events/vault/program/schedule?utm_source=lf&amp;amp;utm_medium=email&amp;amp;utm_campaign=vault15&#34;&gt;http://events.linuxfoundation.org/events/vault/program/schedule?utm_source=lf&amp;amp;utm_medium=email&amp;amp;utm_campaign=vault15&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;onyx: &lt;a href=&#34;https://www.youtube.com/watch?v=vG47Gui3hYE&#34;&gt;https://www.youtube.com/watch?v=vG47Gui3hYE&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go HTTP: Too Many Open Files</title>
      <link>http://yoursitehere/2015/01/golang-http-to-many-open-files/</link>
      <pubDate>Wed, 07 Jan 2015 18:26:39 EST</pubDate>
      <author>Craig Wickesser</author>
      <guid>http://yoursitehere/2015/01/golang-http-to-many-open-files/</guid>
      <description>&lt;p&gt;I recently had a situation where an application I was working on in &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; would
run into the &amp;ldquo;too many open files&amp;rdquo; error. After some debugging, I discovered
it wasn&amp;rsquo;t closing HTTP connections being made to an HTTP server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: It turns out, I was testing against &amp;ldquo;test&amp;rdquo; server which wasn&amp;rsquo;t
setting the &lt;code&gt;Connection: close&lt;/code&gt; header, therefore neither the client or
server was requesting the connection to be closed. If the server had set the
&lt;code&gt;Connection&lt;/code&gt; header, things would&amp;rsquo;ve been fine.&lt;/p&gt;

&lt;p&gt;The code looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  transport := &amp;amp;http.Transport {
    Proxy: http.ProxyFromEnvironment,
    Dial: (&amp;amp;net.Dialer{
      Timeout: 0,
      KeepAlive: 0
    }).Dial,
    TLSHandshakeTimeout: 10 * time.second
  }

  httpClient := &amp;amp;http.Client{Transport: transport}

  function submitData(url string, fileReader io.Reader) error {
    req, reqErr := http.NewRequest(&amp;quot;POST&amp;quot;, url, fileReader)
    if reqErr != nil {
      return reqErr
    }
    req.Header.Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/octet-stream&amp;quot;)

    resp, err := httpClient.Do(req)
    if err != nil {
      return err
    }
    defer resp.Body.Close()

    // read the body

    return nil
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;submitData&lt;/code&gt; function gets called over and over whenever new data needs to
be POSTed. Using &lt;a href=&#34;http://en.wikipedia.org/wiki/Netstat&#34;&gt;netstat&lt;/a&gt; I noticed the
connections to the server were staying &lt;code&gt;ESTABLISHED&lt;/code&gt; instead of being closed. I
set the &amp;ldquo;timeout&amp;rdquo; on the dialer to 0, because the POST should block until the
server is done and responds (which is an undetermined amount of time).&lt;/p&gt;

&lt;p&gt;I know the server is responding, because the code that processes the response
was in fact getting data.&lt;/p&gt;

&lt;p&gt;It turns out, HTTP/1.1 uses persistent connections by default:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A significant difference between HTTP/1.1 and earlier versions of HTTP is that persistent connections are the default behavior of any HTTP connection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;cite&gt;&lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html&#34;&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;The solution was to inform the server that the client wants to close the connection
after the transaction is complete. This can be done by setting the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection&#34;&gt;Connection&lt;/a&gt;
header,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;req.Header.Set(&amp;quot;Connection&amp;quot;, &amp;quot;close&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or by setting the &lt;code&gt;Close&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; on the &lt;a href=&#34;http://golang.org/pkg/net/http/#Request&#34;&gt;http.Request&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;req.Close = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After doing that, the &amp;ldquo;too many open files&amp;rdquo; issue went away as the program was
no longer keeping HTTP connections open and thus not using up file descriptors.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>POST Data to Load Test with ApacheBench</title>
      <link>http://yoursitehere/2015/01/post-data-to-load-test-with-apachebench/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 UTC</pubDate>
      <author>Craig Wickesser</author>
      <guid>http://yoursitehere/2015/01/post-data-to-load-test-with-apachebench/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://httpd.apache.org/docs/2.2/programs/ab.html&#34;&gt;ApacheBench&lt;/a&gt; (also known as, ab) is,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a tool for benchmarking your Apache Hypertext Transfer Protocol (HTTP) server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don&amp;rsquo;t be fooled, you can use it to benchmark any server that supports HTTP. In
fact, it might be worth checking out &lt;a href=&#34;https://github.com/rakyll/boom&#34;&gt;boom&lt;/a&gt; which
is written in &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; which makes it easier to use across platforms,
and is simple to install (spoiler alert: it&amp;rsquo;s just a binary).&lt;/p&gt;

&lt;p&gt;Anyhow, in this post I&amp;rsquo;ll demonstrate using ApacheBench (since I came across it first).&lt;/p&gt;

&lt;p&gt;If you look at the documentation for &lt;code&gt;ab&lt;/code&gt; you&amp;rsquo;ll see there a bunch of options.
The focus of this post is the &lt;code&gt;-p POST-file&lt;/code&gt; option which lets you POST a
&lt;code&gt;File containing data to POST&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sounded simple, so I thought I&amp;rsquo;d give it a shot. I was trying to benchmark a form
submission. I thought maybe I could use &lt;code&gt;-p my-awesome-data.tgz&lt;/code&gt;, but it
wasn&amp;rsquo;t quite that simple.&lt;/p&gt;

&lt;p&gt;After some googling, I found that what I needed to do was submit a file that
looked like a form based file upload. Turns out &lt;a href=&#34;http://www.faqs.org/rfcs/rfc1867.html&#34;&gt;RFC1867&lt;/a&gt; was the ticket.
Here&amp;rsquo;s an example, check out the RFC for more details.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--1234567890
Content-Disposition: form-data; filename=&amp;quot;my-awesome-data.tgz&amp;quot;
Content-Type: application/octet-stream
Content-Transfer-Encoding: binary

&amp;lt;base64 data&amp;gt;
--1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The boundary, &lt;code&gt;1234567890&lt;/code&gt;, should be a value &lt;strong&gt;guaranteed&lt;/strong&gt; not to appear in
the content of the request. The rest of the fields should be relatively simple
to understand. The &lt;code&gt;&amp;lt;base64 data&amp;gt;&lt;/code&gt; portion must contain the base64 encoded
value of the file being uploaded.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how you&amp;rsquo;d run a benchmark that submits 100 requests, with 5 concurrent
clients using a file named &lt;code&gt;post.txt&lt;/code&gt; (which looks like the example shown above)
to &lt;code&gt;http://server.com/api/v1/data&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ab -n 100 -c 5 -T &#39;multipart/form-data; boundary=1234567890&#39; -p post.txt http://server.com/api/v1/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;d like to try out boom, but the concepts are similar so I suspect it should be
just as easy.&lt;/p&gt;

&lt;p&gt;Happy benchmarking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Capture STDOUT in Go</title>
      <link>http://yoursitehere/2015/01/capture-stdout-in-go/</link>
      <pubDate>Fri, 02 Jan 2015 00:00:00 UTC</pubDate>
      <author>Craig Wickesser</author>
      <guid>http://yoursitehere/2015/01/capture-stdout-in-go/</guid>
      <description>&lt;p&gt;Capturing output written to STDOUT (standard output) can be accomplished
with the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import (
  &amp;quot;bytes&amp;quot;
  &amp;quot;io&amp;quot;
  &amp;quot;os&amp;quot;
)

// not thread safe
func captureStdout(f func()) string {
  old := os.Stdout
  r, w, _ := os.Pipe()
  os.Stdout = w

  f()

  w.Close()
  os.Stdout = old

  var buf bytes.Buffer
  io.Copy(&amp;amp;buf, r)
  return buf.String()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code here is fairly straight forward. First, a reference to the &lt;code&gt;Writer&lt;/code&gt;
that&amp;rsquo;s assigned to &lt;code&gt;os.Stdout&lt;/code&gt; is stashed for later. Next a &lt;a href=&#34;http://golang.org/pkg/os/#Pipe&#34;&gt;Pipe&lt;/a&gt; is created,
which provides a connected pair of Files. The writer created by the Pipe is
assigned to &lt;code&gt;os.Stdout&lt;/code&gt;. Perhaps you can see where this is going.&lt;/p&gt;

&lt;p&gt;Next, we invoke the function provided to &lt;code&gt;captureStdout&lt;/code&gt;. The writer is closed
and &lt;code&gt;os.Stdout&lt;/code&gt; gets the original &lt;code&gt;Writer&lt;/code&gt; assigned back to it.&lt;/p&gt;

&lt;p&gt;The final steps are to copy the data from the reader, created from the Pipe,
and return the string as the result.&lt;/p&gt;

&lt;p&gt;You should note, this code is &lt;strong&gt;not thread safe&lt;/strong&gt;. Why? Because of that
&lt;em&gt;global&lt;/em&gt; reference, &lt;code&gt;os.Stdout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An example using it would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func doSomething() {
  fmt.Println(&amp;quot;This goes to STDOUT&amp;quot;)
}

func example() {

  // invoke doSomething and return whatever it writes to STDOUT
  message := captureStdout(doSomething)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example shown is trivial. I had a use case where I had to execute an
executable on the system that wrote data to STDOUT which I needed to process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on Windows 8</title>
      <link>http://yoursitehere/2014/12/windows-8-thoughts/</link>
      <pubDate>Sun, 28 Dec 2014 00:00:00 UTC</pubDate>
      <author>Craig Wickesser</author>
      <guid>http://yoursitehere/2014/12/windows-8-thoughts/</guid>
      <description>&lt;p&gt;My son received a laptop, his first, for Christmas. It&amp;rsquo;s an ASUS running Windows 8. To date, he&amp;rsquo;s only used Apple laptops, iPad, iPhone Touch and Galaxy S3/&lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt; Android phones at home.&lt;/p&gt;

&lt;p&gt;I helped setup the laptop and the first thing I noticed was the &amp;ldquo;app&amp;rdquo; centric user interface. I noticed he seemed to be able to navigate around rather easily and wasn&amp;rsquo;t getting lost. The &amp;ldquo;app&amp;rdquo; centric focus of the operating system is compelling and I believe a win for Microsoft in terms of aligning with the younger generation.&lt;/p&gt;

&lt;p&gt;The first issue I ran into was when my son wanted to install the YouTube client.  I was able to find it in the Store, thanks to it being near the top of the &amp;ldquo;Top Free&amp;rdquo; apps. I was surprised not to see a &amp;ldquo;search&amp;rdquo; option, but perhaps I just didn&amp;rsquo;t see it. The Store said that Windows 8.1 was required to install the YouTube client.&lt;/p&gt;

&lt;p&gt;Luckily, the Store had Windows 8.1 as a featured item to install, so I clicked the button to install it. I was then prompted with a message stating updates needed to be installed first. I began the install for those which took a little over an hour and required a restart.&lt;/p&gt;

&lt;p&gt;Once the laptop booted up, I went back to the store to install Windows 8.1. Again, it took a while and required a restart. After the laptop booted up with Windows 8.1 freshly installed I went back to the Store. This time I noticed a search box, which I used to find the YouTube client, since the &amp;ldquo;Top Free&amp;rdquo; apps list was no longer an option.&lt;/p&gt;

&lt;p&gt;Upon trying to install the YouTube client it stated that it required a parents permission (since my son is younger than 13). I clicked the &amp;ldquo;Fix It&amp;rdquo; button, logged into my Microsoft Live account (which I forgot I had). After logging in, I was just dropped into the account home, no directions on where to go to approve installing the YouTube client app. I went back to try installing the YouTube client and again it said, I could &amp;ldquo;Fix It&amp;rdquo; (the parent permission issue). I clicked the button and again it just took me to the Microsoft Live account home page.&lt;/p&gt;

&lt;p&gt;After trying several variations of the steps I&amp;rsquo;ve already described, I decided I&amp;rsquo;d change my sons account to make his birthday such that he was at least 13 years old. After I figured out how to do that, I was required to put in credit card information so Microsoft could verify I (my son in this case) was an adult. I submitted the information, and Microsoft was happy that the credit card I submitted verified someone elses age (since the card has my name, not my sons).&lt;/p&gt;

&lt;p&gt;Finally, I was able to install the YouTube client app.&lt;/p&gt;

&lt;p&gt;This is where Windows 8 went wrong. Certain aspects are just overly complicated and difficult to follow, especially for children. In concrast, the &lt;a href=&#34;www.amazon.com/kids-edition-tablet&#34;&gt;Amazon Fire Kids&lt;/a&gt; made it stupid simple to setup, add a &amp;ldquo;childs&amp;rdquo; account and let them begin playing with it (including add apps). Certainly the Windows 8 laptop and the Amazon tablet are different in many ways, but I think the comparison is reasonable to demonstrate how Windows 8 got things wrong and how something like the Amazon Fire kids tablet got it right.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/hashtag/windows8&#34;&gt;#windows8&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/amazon&#34;&gt;#amazon&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Starting a new Go project</title>
      <link>http://yoursitehere/2014/12/starting-a-new-go-project/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 UTC</pubDate>
      <author>Craig Wickesser</author>
      <guid>http://yoursitehere/2014/12/starting-a-new-go-project/</guid>
      <description>

&lt;p&gt;I have the need for a program that can monitor Kubernetes* for services* and update an HAProxy* configuration file when changes occur. Sounds rather simple, however, there&amp;rsquo;s a slight twist. I don&amp;rsquo;t want to simply add entries to HAProxy for each service created in Kubernetes (it also wouldn&amp;rsquo;t work as multiple services in Kubernetes could have the same port, since each service has its own IP address).&lt;/p&gt;

&lt;p&gt;Instead I need a way to define a set of rules, perhaps as simple as a template, that will be used to update the HAProxy configuration file intelligently.&lt;/p&gt;

&lt;p&gt;The template spec:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ServiceEntry struct {
    Name string `json:&amp;quot;name,omitempty&amp;quot;`
    Port int `json:&amp;quot;port,omitempty&amp;quot;`
    Uri string `json:&amp;quot;uri,omitempty&amp;quot;`
}

type ServiceEntries []ServiceEntry {}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;services:
    # accessible as http://&amp;lt;proxy ip&amp;gt;:9200
    # the name of the service to monitor
    - name: elasticsearch
    # the port on the proxy for the service
      port: 9200
    # the uri on the proxy for the service
      uri: /
    # accessible as http://&amp;lt;proxy ip&amp;gt;/kibana
    - name: kibana
      port: 80
      uri: /kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be continued&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/kubernetes/&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/services.md&#34;&gt;Kubernetes services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.haproxy.org/&#34;&gt;HAProxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/go-wiki/wiki/GithubCodeLayout&#34;&gt;GithubCodeLayout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>