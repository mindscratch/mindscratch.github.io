<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on craig wickesser</title>
    <link>http://craigwickesser.com/categories/posts/</link>
    <description>Recent content in Posts on craig wickesser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>codecraig@gmail.com (Craig Wickesser)</managingEditor>
    <webMaster>codecraig@gmail.com (Craig Wickesser)</webMaster>
    <lastBuildDate>Mon, 18 Jan 2016 20:06:53 -0500</lastBuildDate>
    <atom:link href="http://craigwickesser.com/categories/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Secure Email on Mac OS X</title>
      <link>http://craigwickesser.com/2016/01/secure-email-on-mac/</link>
      <pubDate>Mon, 18 Jan 2016 20:06:53 -0500</pubDate>
      <author>codecraig@gmail.com (Craig Wickesser)</author>
      <guid>http://craigwickesser.com/2016/01/secure-email-on-mac/</guid>
      <description>&lt;p&gt;This will be quick. I use GMail but it lacks the native ability to sign and
encrypt email. I did some looking around for desktop email clients for Mac OS X
that support &lt;a href=&#34;https://en.wikipedia.org/wiki/S/MIME&#34;&gt;S/MIME&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I ended up going with &lt;a href=&#34;http://airmailapp.com/&#34;&gt;Airmail 2&lt;/a&gt; because it has S/MIME
support and it supports &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; which I like to use.&lt;/p&gt;

&lt;p&gt;S/MIME support is provided by a &lt;a href=&#34;http://airmailapp.com/smime&#34;&gt;plugin&lt;/a&gt;. Follow
the instructions after going to the link, you&amp;rsquo;ll ultimately download a zip file.&lt;/p&gt;

&lt;p&gt;Open Airmail, click on the &lt;code&gt;Window&lt;/code&gt; menu and select &lt;code&gt;Show Plugins Folder...&lt;/code&gt;.
Extract the S/MIME plugin zip file and copy the &lt;code&gt;.bundle&lt;/code&gt; file into the plugins
folder.&lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;Window&lt;/code&gt; menu and choose &lt;code&gt;Plugins&lt;/code&gt; and click &lt;code&gt;Reload Plugins&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should be all set to send signed and encrypted email.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: Comodo offers a &lt;a href=&#34;https://www.comodo.com/home/email-security/free-email-certificate.php&#34;&gt;free email certificate&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mesos on Mac OS X</title>
      <link>http://craigwickesser.com/2016/01/mesos-on-mac-osx/</link>
      <pubDate>Sat, 09 Jan 2016 12:14:56 -0500</pubDate>
      <author>codecraig@gmail.com (Craig Wickesser)</author>
      <guid>http://craigwickesser.com/2016/01/mesos-on-mac-osx/</guid>
      <description>

&lt;p&gt;Using docker it&amp;rsquo;s simple to get a &lt;a href=&#34;mesos.apache.org&#34;&gt;Mesos&lt;/a&gt; cluster running on Mac OS X. I&amp;rsquo;m running Docker 1.9.1
and OS X 10.11.2. We&amp;rsquo;ll be running Zookeeper 3.4.7 and Mesos 0.24.1 (that&amp;rsquo;s the version provided by the docker image I&amp;rsquo;m using for this example).&lt;/p&gt;

&lt;p&gt;First we&amp;rsquo;ll start a Zookeeper server, then a Mesos master and
a single Mesos slave.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: I have satellite internet, so my downloads are throttled after I use the data allowance for the month. I was able to pull a Docker images for Mesos but I kept having issues pulling the Zookeeper so I just downloaded Zookeeper from their &lt;a href=&#34;zookeeper.apache.org&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;zookeeper:fbd5e7fec7c8e618d5a6c691dfb3fbe5&#34;&gt;Zookeeper&lt;/h2&gt;

&lt;p&gt;After downloading the zookeeper tarball, extract it. Copy the sample configuration file, &lt;code&gt;cp /path/to/zookeeper-3.4.7/conf/zoo_sample.cfg /path/to/zookeeper-3.4.7/zoo.cfg&lt;/code&gt;. For now, the default configuration is good enough.&lt;/p&gt;

&lt;p&gt;Start the server: &lt;code&gt;/path/to/zookeeper-3.4.7/bin/zkServer.sh&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;start-mesos-master:fbd5e7fec7c8e618d5a6c691dfb3fbe5&#34;&gt;Start Mesos master&lt;/h2&gt;

&lt;p&gt;On the Mac, Docker is run in a VM, so we have to do some finagling to get the correect IP address for Mesos to use. To start the Mesos master I created a small script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

dockerIp=$(echo $DOCKER_HOST | cut -d &#39;/&#39; -f 3 | cut -d &#39;:&#39; -f 1)
hostIp=$(ipconfig getifaddr en0)

docker run \
-e MESOS_HOSTNAME=$dockerIp \
-e MESOS_IP=$dockerIp \
-e MESOS_QUORUM=1 \
-e MESOS_ZK=zk://$hostIp:2181/mesos \
--name mesos-master \
--net host \
--restart always \
mesoscloud/mesos-master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;note&lt;/em&gt;: You could optionally pass the &lt;code&gt;-d&lt;/code&gt; flag so the container would run in the background.&lt;/p&gt;

&lt;h2 id=&#34;start-mesos-slave:fbd5e7fec7c8e618d5a6c691dfb3fbe5&#34;&gt;Start Mesos slave&lt;/h2&gt;

&lt;p&gt;I also used a script to start the Mesos slave:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

dockerIp=$(echo $DOCKER_HOST | cut -d &#39;/&#39; -f 3 | cut -d &#39;:&#39; -f 1)
hostIp=$(ipconfig getifaddr en0)

docker run \
-e MESOS_HOSTNAME=$dockerIp \
-e MESOS_IP=$dockerIp \
-e MESOS_MASTER=zk://$hostIp:2181/mesos \
-v /sys/fs/cgroup:/sys/fs/cgroup \
-v /var/run/docker.sock:/var/run/docker.sock \
--name slave --net host --privileged --restart always \
mesoscloud/mesos-slave
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now browse to the Mesos UI. You&amp;rsquo;ll need to get the IP address of the VM running docker:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash-3.2$ echo $DOCKER_HOST
tcp://192.168.99.100:2376
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, browse to &lt;code&gt;http://192.168.99.100:5050&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mesos 0.22.0 Release</title>
      <link>http://craigwickesser.com/2015/03/mesos-022-release/</link>
      <pubDate>Tue, 24 Mar 2015 20:33:36 -0500</pubDate>
      <author>codecraig@gmail.com (Craig Wickesser)</author>
      <guid>http://craigwickesser.com/2015/03/mesos-022-release/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://mesos.apache.org/&#34;&gt;Mesos&lt;/a&gt; 0.22.0 has been &lt;a href=&#34;https://dist.apache.org/repos/dist/release/mesos/0.22.0/&#34;&gt;released&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a nice &lt;a href=&#34;https://www.youtube.com/watch?v=LC3dlmdc4bc&#34;&gt;video&lt;/a&gt; which goes through the new features in 0.22.0 as well as
some features scheduled for the 0.23.0 release.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve put together some notes I put together while watching the video.&lt;/p&gt;

&lt;h2 id=&#34;disk-isolation:05540a89ab0bd7894a855407044491dc&#34;&gt;Disk Isolation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://issues.apache.org/jira/browse/MESOS-1589&#34;&gt;Disk Isolation&lt;/a&gt; allows the
&lt;code&gt;MesosContainerizer&lt;/code&gt; to enforce a disk quota. Prior to 0.22.0 mesos supported &lt;a href=&#34;https://youtu.be/LC3dlmdc4bc?t=207&#34;&gt;isolation&lt;/a&gt; of cpu, memory, pid namespacing,
network ports and bandwidth.&lt;/p&gt;

&lt;p&gt;To use this new isolation, two new flags are required:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# enable disk isolation
--isolation=“posix/disk” --enforce_container_disk_quota

# set the quota, in megabytes
-—resources=“disk:64”
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;disaster-prevention:05540a89ab0bd7894a855407044491dc&#34;&gt;Disaster Prevention&lt;/h2&gt;

&lt;p&gt;There are &lt;a href=&#34;https://youtu.be/LC3dlmdc4bc?t=503&#34;&gt;several mechanisms&lt;/a&gt; to prevent
disaster that were in place prior to the 0.22.0 release:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;master commits suicide when losing connection to ZK&lt;/li&gt;
&lt;li&gt;compute nodes ignore shutdown requests received from master that is not leader&lt;/li&gt;
&lt;li&gt;recovery remove limit (% of cluster)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this release the ability to &lt;a href=&#34;https://issues.apache.org/jira/browse/MESOS-1148&#34;&gt;rate limit slave removal&lt;/a&gt;
was added which could allow administrators to react when they notice the
slave removals occurring.&lt;/p&gt;

&lt;p&gt;To configure the rate limit, a new flag is available:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# remove one slave per minute
--slave_removal_rate_limit=1/1mins
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;labels-and-discovery:05540a89ab0bd7894a855407044491dc&#34;&gt;Labels and Discovery&lt;/h2&gt;

&lt;p&gt;Tasks can now have &lt;a href=&#34;https://github.com/apache/mesos/blob/b2f73095fd168a75c2754f26d5368f4cff414752/include/mesos/mesos.proto#L1056&#34;&gt;labels&lt;/a&gt;, which are simply key/value pairs. This allows tasks to be tagged, for example &lt;code&gt;environment: production&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, tasks can now include &lt;a href=&#34;https://github.com/apache/mesos/blob/b2f73095fd168a75c2754f26d5368f4cff414752/include/mesos/mesos.proto#L1093&#34;&gt;DiscoveryInfo&lt;/a&gt;. This information can be used for service discovery as it can provide
common attributes such as &lt;code&gt;environment&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt;. However, it
also supports &lt;a href=&#34;https://github.com/apache/mesos/blob/b2f73095fd168a75c2754f26d5368f4cff414752/include/mesos/mesos.proto#L1075&#34;&gt;Ports&lt;/a&gt; (which can have names), as well as arbitrary labels.&lt;/p&gt;

&lt;p&gt;Video link: &lt;a href=&#34;https://youtu.be/LC3dlmdc4bc?t=600d168a75c2754f26d5368f4cff414752/include/mesos/mesos.proto#L1093&#34;&gt;https://youtu.be/LC3dlmdc4bc?t=600d168a75c2754f26d5368f4cff414752/include/mesos/mesos.proto#L1093&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;more-features-and-improvements:05540a89ab0bd7894a855407044491dc&#34;&gt;More features and improvements&lt;/h2&gt;

&lt;p&gt;There are other features and improvements which are highlighted in the video.
I imagine the mesos website will be updated soon with a summary as well.&lt;/p&gt;

&lt;h2 id=&#34;what-to-look-forward-to:05540a89ab0bd7894a855407044491dc&#34;&gt;What to look forward to&lt;/h2&gt;

&lt;p&gt;With a release being published within the hour, naturally it&amp;rsquo;s time to look at
what&amp;rsquo;s coming next:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://issues.apache.org/jira/browse/MESOS-1554&#34;&gt;persistent primitives&lt;/a&gt; - to
support storage-like services&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://issues.apache.org/jira/browse/MESOS-2018&#34;&gt;dynamic reservations&lt;/a&gt; - allow a
framework to dynamically reserve offered resources, allowing those resources to
only be re-offered to the same framework (to support stateful services)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://issues.apache.org/jira/browse/MESOS-910&#34;&gt;ssl support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://issues.apache.org/jira/browse/MESOS-1607&#34;&gt;optimistic offers&lt;/a&gt; - resource offers
are currently offered to a single framework at a time, with optimistic offers the
offers would be handed out in parallel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, there&amp;rsquo;s other features, improvements and bug fixes slated for Mesos 0.23.0
but this should at least give a taste for what&amp;rsquo;s to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go: command with custom environment</title>
      <link>http://craigwickesser.com/2015/02/golang-cmd-with-custom-environment/</link>
      <pubDate>Tue, 24 Feb 2015 21:51:56 -0500</pubDate>
      <author>codecraig@gmail.com (Craig Wickesser)</author>
      <guid>http://craigwickesser.com/2015/02/golang-cmd-with-custom-environment/</guid>
      <description>&lt;p&gt;Problem: Execute an external process with a customized environment.&lt;/p&gt;

&lt;p&gt;Solution: The &lt;a href=&#34;https://gobyexample.com&#34;&gt;Go by Example&lt;/a&gt; site
has as an example demonstrating how to &lt;a href=&#34;https://gobyexample.com/spawning-processes&#34;&gt;spawn an external process&lt;/a&gt; and how &lt;a href=&#34;https://gobyexample.com/execing-processes&#34;&gt;exec
a process&lt;/a&gt;. Those two examples provide
a great starting point. Below, we&amp;rsquo;ll take it a step further to modify the
environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;os/exec&amp;quot;
)

// In this example `messageId` is a value that
// needs to be stored in an environment variable to be
// used by the command that&#39;s going to be executed
func doIt(messageId string) error {
	binary, err := exec.LookPath(&amp;quot;print_env.sh&amp;quot;)
	if err != nil {
		return err
	}

	cmd := exec.Command(binary)
	env := os.Environ()
	env = append(env, fmt.Sprintf(&amp;quot;MESSAGE_ID=%s&amp;quot;, messageId))
	cmd.Env = env

	cmdOut, _ := cmd.StdoutPipe()
	//cmdErr, _ := cmd.StderrPipe()

	startErr := cmd.Start()
	if startErr != nil {
		return startErr
	}

	// read stdout and stderr
	stdOutput, _ := ioutil.ReadAll(cmdOut)
	//errOutput, _ := ioutil.ReadAll(cmdErr)

	fmt.Printf(&amp;quot;STDOUT: %s\n&amp;quot;, stdOutput)
	//fmt.Printf(&amp;quot;ERROUT: %s\n&amp;quot;, errOutput)

	err = cmd.Wait()
	return err
}

func main() {
	messageId := &amp;quot;abc123&amp;quot;
	err := doIt(messageId)
	if err != nil {
		fmt.Printf(&amp;quot;Error: %v\n&amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;doIt&lt;/code&gt; function is where the magic happens. First, a &lt;code&gt;exec.Command&lt;/code&gt; is
created. Next, we grab a copy of the environment using &lt;code&gt;os.Environ()&lt;/code&gt;. The
environment is a slice of strings so we append another string, in the correct
format, containing the environment variable we want to add, &lt;code&gt;MESSAGE_ID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The rest of the code sets up reading stdout (and stderr, though I commented )
and executing the command. If you run the program, you&amp;rsquo;ll see in the output
that &lt;code&gt;MESSAGE_ID&lt;/code&gt; was set to &lt;code&gt;abc123&lt;/code&gt; (as passed into the &lt;code&gt;doIt&lt;/code&gt; function).&lt;/p&gt;

&lt;p&gt;Simple, right?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mindscratch Newsletter 1</title>
      <link>http://craigwickesser.com/2015/01/mindscratch-newsletter-1/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      <author>codecraig@gmail.com (Craig Wickesser)</author>
      <guid>http://craigwickesser.com/2015/01/mindscratch-newsletter-1/</guid>
      <description>&lt;p&gt;On a regular basis, hopefully once per week, I&amp;rsquo;ll be posting links to
content related to distributed systems, programming and devops. If you&amp;rsquo;d prefer
to access this content via email, then &lt;a href=&#34;http://craigwickesser.com/subscribe&#34;&gt;subscribe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/Apache-Mesos-NYC-Meetup/events/219073804/&#34;&gt;http://www.meetup.com/Apache-Mesos-NYC-Meetup/events/219073804/&lt;/a&gt;
  - interesting b/c of  mention of running Accumulo on Mesos&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/ColleenLee1/iguaz-a-longrunning-job-scheduler-using-docker-and-mesos&#34;&gt;http://www.slideshare.net/ColleenLee1/iguaz-a-longrunning-job-scheduler-using-docker-and-mesos&lt;/a&gt;
  - job scheduler from corsera&lt;/p&gt;

&lt;p&gt;Docker security
&lt;a href=&#34;https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines&#34;&gt;https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines&lt;/a&gt;
&lt;a href=&#34;https://www.gartner.com/doc/2956826&#34;&gt;https://www.gartner.com/doc/2956826&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ExPHAT/twitter-sort&#34;&gt;https://github.com/ExPHAT/twitter-sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://am./chronos&#34;&gt;http://am./chronos&lt;/a&gt; &amp;ndash;master zk://server1:2181/mesos &amp;ndash;zk_hosts zk://server1:2181/mesos &amp;ndash;http_port 8080bari.apache.org/&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jpetazzo.github.io/2015/01/13/docker-mount-dynamic-volumes/&#34;&gt;http://jpetazzo.github.io/2015/01/13/docker-mount-dynamic-volumes/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://codeascraft.com/2015/01/14/introducing-statsd-jvm-profiler-a-jvm-profiler-for-hadoop/&#34;&gt;https://codeascraft.com/2015/01/14/introducing-statsd-jvm-profiler-a-jvm-profiler-for-hadoop/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go
Go Static Analysis Tools by Alan Donovan &lt;a href=&#34;https://vimeo.com/116108566&#34;&gt;https://vimeo.com/116108566&lt;/a&gt;
Benchmarking Go &lt;a href=&#34;https://vimeo.com/114975899&#34;&gt;https://vimeo.com/114975899&lt;/a&gt;
7 common mistakes in go and how to avoid them &lt;a href=&#34;https://vimeo.com/115776445&#34;&gt;https://vimeo.com/115776445&lt;/a&gt;
cancellation, context and plumbing &lt;a href=&#34;https://vimeo.com/115309491&#34;&gt;https://vimeo.com/115309491&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Io.js
&lt;a href=&#34;https://www.youtube.com/watch?v=DqMFX91ToLw&#34;&gt;https://www.youtube.com/watch?v=DqMFX91ToLw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ecmascript 7 async &amp;ndash; the evolution of javascript - &lt;a href=&#34;https://www.youtube.com/watch?v=DqMFX91ToLw&#34;&gt;https://www.youtube.com/watch?v=DqMFX91ToLw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://opensource.com/business/15/1/apache-spark-new-world-record&#34;&gt;http://opensource.com/business/15/1/apache-spark-new-world-record&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://events.linuxfoundation.org/events/vault/program/schedule?utm_source=lf&amp;amp;utm_medium=email&amp;amp;utm_campaign=vault15&#34;&gt;http://events.linuxfoundation.org/events/vault/program/schedule?utm_source=lf&amp;amp;utm_medium=email&amp;amp;utm_campaign=vault15&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;onyx: &lt;a href=&#34;https://www.youtube.com/watch?v=vG47Gui3hYE&#34;&gt;https://www.youtube.com/watch?v=vG47Gui3hYE&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go HTTP: Too Many Open Files</title>
      <link>http://craigwickesser.com/2015/01/golang-http-to-many-open-files/</link>
      <pubDate>Wed, 07 Jan 2015 18:26:39 -0500</pubDate>
      <author>codecraig@gmail.com (Craig Wickesser)</author>
      <guid>http://craigwickesser.com/2015/01/golang-http-to-many-open-files/</guid>
      <description>&lt;p&gt;I recently had a situation where an application I was working on in &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; would
run into the &amp;ldquo;too many open files&amp;rdquo; error. After some debugging, I discovered
it wasn&amp;rsquo;t closing HTTP connections being made to an HTTP server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: It turns out, I was testing against &amp;ldquo;test&amp;rdquo; server which wasn&amp;rsquo;t
setting the &lt;code&gt;Connection: close&lt;/code&gt; header, therefore neither the client or
server was requesting the connection to be closed. If the server had set the
&lt;code&gt;Connection&lt;/code&gt; header, things would&amp;rsquo;ve been fine.&lt;/p&gt;

&lt;p&gt;The code looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  transport := &amp;amp;http.Transport {
    Proxy: http.ProxyFromEnvironment,
    Dial: (&amp;amp;net.Dialer{
      Timeout: 0,
      KeepAlive: 0
    }).Dial,
    TLSHandshakeTimeout: 10 * time.second
  }

  httpClient := &amp;amp;http.Client{Transport: transport}

  function submitData(url string, fileReader io.Reader) error {
    req, reqErr := http.NewRequest(&amp;quot;POST&amp;quot;, url, fileReader)
    if reqErr != nil {
      return reqErr
    }
    req.Header.Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/octet-stream&amp;quot;)

    resp, err := httpClient.Do(req)
    if err != nil {
      return err
    }
    defer resp.Body.Close()

    // read the body

    return nil
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;submitData&lt;/code&gt; function gets called over and over whenever new data needs to
be POSTed. Using &lt;a href=&#34;http://en.wikipedia.org/wiki/Netstat&#34;&gt;netstat&lt;/a&gt; I noticed the
connections to the server were staying &lt;code&gt;ESTABLISHED&lt;/code&gt; instead of being closed. I
set the &amp;ldquo;timeout&amp;rdquo; on the dialer to 0, because the POST should block until the
server is done and responds (which is an undetermined amount of time).&lt;/p&gt;

&lt;p&gt;I know the server is responding, because the code that processes the response
was in fact getting data.&lt;/p&gt;

&lt;p&gt;It turns out, HTTP/1.1 uses persistent connections by default:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A significant difference between HTTP/1.1 and earlier versions of HTTP is that persistent connections are the default behavior of any HTTP connection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;cite&gt;&lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html&#34;&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;The solution was to inform the server that the client wants to close the connection
after the transaction is complete. This can be done by setting the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection&#34;&gt;Connection&lt;/a&gt;
header,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;req.Header.Set(&amp;quot;Connection&amp;quot;, &amp;quot;close&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or by setting the &lt;code&gt;Close&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; on the &lt;a href=&#34;http://golang.org/pkg/net/http/#Request&#34;&gt;http.Request&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;req.Close = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After doing that, the &amp;ldquo;too many open files&amp;rdquo; issue went away as the program was
no longer keeping HTTP connections open and thus not using up file descriptors.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>POST Data to Load Test with ApacheBench</title>
      <link>http://craigwickesser.com/2015/01/post-data-to-load-test-with-apachebench/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      <author>codecraig@gmail.com (Craig Wickesser)</author>
      <guid>http://craigwickesser.com/2015/01/post-data-to-load-test-with-apachebench/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://httpd.apache.org/docs/2.2/programs/ab.html&#34;&gt;ApacheBench&lt;/a&gt; (also known as, ab) is,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a tool for benchmarking your Apache Hypertext Transfer Protocol (HTTP) server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don&amp;rsquo;t be fooled, you can use it to benchmark any server that supports HTTP. In
fact, it might be worth checking out &lt;a href=&#34;https://github.com/rakyll/boom&#34;&gt;boom&lt;/a&gt; which
is written in &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; which makes it easier to use across platforms,
and is simple to install (spoiler alert: it&amp;rsquo;s just a binary).&lt;/p&gt;

&lt;p&gt;Anyhow, in this post I&amp;rsquo;ll demonstrate using ApacheBench (since I came across it first).&lt;/p&gt;

&lt;p&gt;If you look at the documentation for &lt;code&gt;ab&lt;/code&gt; you&amp;rsquo;ll see there a bunch of options.
The focus of this post is the &lt;code&gt;-p POST-file&lt;/code&gt; option which lets you POST a
&lt;code&gt;File containing data to POST&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sounded simple, so I thought I&amp;rsquo;d give it a shot. I was trying to benchmark a form
submission. I thought maybe I could use &lt;code&gt;-p my-awesome-data.tgz&lt;/code&gt;, but it
wasn&amp;rsquo;t quite that simple.&lt;/p&gt;

&lt;p&gt;After some googling, I found that what I needed to do was submit a file that
looked like a form based file upload. Turns out &lt;a href=&#34;http://www.faqs.org/rfcs/rfc1867.html&#34;&gt;RFC1867&lt;/a&gt; was the ticket.
Here&amp;rsquo;s an example, check out the RFC for more details.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--1234567890
Content-Disposition: form-data; filename=&amp;quot;my-awesome-data.tgz&amp;quot;
Content-Type: application/octet-stream
Content-Transfer-Encoding: binary

&amp;lt;base64 data&amp;gt;
--1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The boundary, &lt;code&gt;1234567890&lt;/code&gt;, should be a value &lt;strong&gt;guaranteed&lt;/strong&gt; not to appear in
the content of the request. The rest of the fields should be relatively simple
to understand. The &lt;code&gt;&amp;lt;base64 data&amp;gt;&lt;/code&gt; portion must contain the base64 encoded
value of the file being uploaded.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how you&amp;rsquo;d run a benchmark that submits 100 requests, with 5 concurrent
clients using a file named &lt;code&gt;post.txt&lt;/code&gt; (which looks like the example shown above)
to &lt;code&gt;http://server.com/api/v1/data&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ab -n 100 -c 5 -T &#39;multipart/form-data; boundary=1234567890&#39; -p post.txt http://server.com/api/v1/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;d like to try out boom, but the concepts are similar so I suspect it should be
just as easy.&lt;/p&gt;

&lt;p&gt;Happy benchmarking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Capture STDOUT in Go</title>
      <link>http://craigwickesser.com/2015/01/capture-stdout-in-go/</link>
      <pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate>
      <author>codecraig@gmail.com (Craig Wickesser)</author>
      <guid>http://craigwickesser.com/2015/01/capture-stdout-in-go/</guid>
      <description>&lt;p&gt;Capturing output written to STDOUT (standard output) can be accomplished
with the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import (
  &amp;quot;bytes&amp;quot;
  &amp;quot;io&amp;quot;
  &amp;quot;os&amp;quot;
)

// not thread safe
func captureStdout(f func()) string {
  old := os.Stdout
  r, w, _ := os.Pipe()
  os.Stdout = w

  f()

  w.Close()
  os.Stdout = old

  var buf bytes.Buffer
  io.Copy(&amp;amp;buf, r)
  return buf.String()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code here is fairly straight forward. First, a reference to the &lt;code&gt;Writer&lt;/code&gt;
that&amp;rsquo;s assigned to &lt;code&gt;os.Stdout&lt;/code&gt; is stashed for later. Next a &lt;a href=&#34;http://golang.org/pkg/os/#Pipe&#34;&gt;Pipe&lt;/a&gt; is created,
which provides a connected pair of Files. The writer created by the Pipe is
assigned to &lt;code&gt;os.Stdout&lt;/code&gt;. Perhaps you can see where this is going.&lt;/p&gt;

&lt;p&gt;Next, we invoke the function provided to &lt;code&gt;captureStdout&lt;/code&gt;. The writer is closed
and &lt;code&gt;os.Stdout&lt;/code&gt; gets the original &lt;code&gt;Writer&lt;/code&gt; assigned back to it.&lt;/p&gt;

&lt;p&gt;The final steps are to copy the data from the reader, created from the Pipe,
and return the string as the result.&lt;/p&gt;

&lt;p&gt;You should note, this code is &lt;strong&gt;not thread safe&lt;/strong&gt;. Why? Because of that
&lt;em&gt;global&lt;/em&gt; reference, &lt;code&gt;os.Stdout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An example using it would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func doSomething() {
  fmt.Println(&amp;quot;This goes to STDOUT&amp;quot;)
}

func example() {

  // invoke doSomething and return whatever it writes to STDOUT
  message := captureStdout(doSomething)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example shown is trivial. I had a use case where I had to execute an
executable on the system that wrote data to STDOUT which I needed to process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on Windows 8</title>
      <link>http://craigwickesser.com/2014/12/windows-8-thoughts/</link>
      <pubDate>Sun, 28 Dec 2014 00:00:00 +0000</pubDate>
      <author>codecraig@gmail.com (Craig Wickesser)</author>
      <guid>http://craigwickesser.com/2014/12/windows-8-thoughts/</guid>
      <description>&lt;p&gt;My son received a laptop, his first, for Christmas. It&amp;rsquo;s an ASUS running Windows 8. To date, he&amp;rsquo;s only used Apple laptops, iPad, iPhone Touch and Galaxy S3/4/5 Android phones at home.&lt;/p&gt;

&lt;p&gt;I helped setup the laptop and the first thing I noticed was the &amp;ldquo;app&amp;rdquo; centric user interface. I noticed he seemed to be able to navigate around rather easily and wasn&amp;rsquo;t getting lost. The &amp;ldquo;app&amp;rdquo; centric focus of the operating system is compelling and I believe a win for Microsoft in terms of aligning with the younger generation.&lt;/p&gt;

&lt;p&gt;The first issue I ran into was when my son wanted to install the YouTube client.  I was able to find it in the Store, thanks to it being near the top of the &amp;ldquo;Top Free&amp;rdquo; apps. I was surprised not to see a &amp;ldquo;search&amp;rdquo; option, but perhaps I just didn&amp;rsquo;t see it. The Store said that Windows 8.1 was required to install the YouTube client.&lt;/p&gt;

&lt;p&gt;Luckily, the Store had Windows 8.1 as a featured item to install, so I clicked the button to install it. I was then prompted with a message stating updates needed to be installed first. I began the install for those which took a little over an hour and required a restart.&lt;/p&gt;

&lt;p&gt;Once the laptop booted up, I went back to the store to install Windows 8.1. Again, it took a while and required a restart. After the laptop booted up with Windows 8.1 freshly installed I went back to the Store. This time I noticed a search box, which I used to find the YouTube client, since the &amp;ldquo;Top Free&amp;rdquo; apps list was no longer an option.&lt;/p&gt;

&lt;p&gt;Upon trying to install the YouTube client it stated that it required a parents permission (since my son is younger than 13). I clicked the &amp;ldquo;Fix It&amp;rdquo; button, logged into my Microsoft Live account (which I forgot I had). After logging in, I was just dropped into the account home, no directions on where to go to approve installing the YouTube client app. I went back to try installing the YouTube client and again it said, I could &amp;ldquo;Fix It&amp;rdquo; (the parent permission issue). I clicked the button and again it just took me to the Microsoft Live account home page.&lt;/p&gt;

&lt;p&gt;After trying several variations of the steps I&amp;rsquo;ve already described, I decided I&amp;rsquo;d change my sons account to make his birthday such that he was at least 13 years old. After I figured out how to do that, I was required to put in credit card information so Microsoft could verify I (my son in this case) was an adult. I submitted the information, and Microsoft was happy that the credit card I submitted verified someone elses age (since the card has my name, not my sons).&lt;/p&gt;

&lt;p&gt;Finally, I was able to install the YouTube client app.&lt;/p&gt;

&lt;p&gt;This is where Windows 8 went wrong. Certain aspects are just overly complicated and difficult to follow, especially for children. In concrast, the &lt;a href=&#34;www.amazon.com/kids-edition-tablet&#34;&gt;Amazon Fire Kids&lt;/a&gt; made it stupid simple to setup, add a &amp;ldquo;childs&amp;rdquo; account and let them begin playing with it (including add apps). Certainly the Windows 8 laptop and the Amazon tablet are different in many ways, but I think the comparison is reasonable to demonstrate how Windows 8 got things wrong and how something like the Amazon Fire kids tablet got it right.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/hashtag/windows8&#34;&gt;#windows8&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/amazon&#34;&gt;#amazon&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Starting a new Go project</title>
      <link>http://craigwickesser.com/2014/12/starting-a-new-go-project/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
      <author>codecraig@gmail.com (Craig Wickesser)</author>
      <guid>http://craigwickesser.com/2014/12/starting-a-new-go-project/</guid>
      <description>

&lt;p&gt;I have the need for a program that can monitor Kubernetes* for services* and update an HAProxy* configuration file when changes occur. Sounds rather simple, however, there&amp;rsquo;s a slight twist. I don&amp;rsquo;t want to simply add entries to HAProxy for each service created in Kubernetes (it also wouldn&amp;rsquo;t work as multiple services in Kubernetes could have the same port, since each service has its own IP address).&lt;/p&gt;

&lt;p&gt;Instead I need a way to define a set of rules, perhaps as simple as a template, that will be used to update the HAProxy configuration file intelligently.&lt;/p&gt;

&lt;p&gt;The template spec:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ServiceEntry struct {
    Name string `json:&amp;quot;name,omitempty&amp;quot;`
    Port int `json:&amp;quot;port,omitempty&amp;quot;`
    Uri string `json:&amp;quot;uri,omitempty&amp;quot;`
}

type ServiceEntries []ServiceEntry {}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;services:
    # accessible as http://&amp;lt;proxy ip&amp;gt;:9200
    # the name of the service to monitor
    - name: elasticsearch
    # the port on the proxy for the service
      port: 9200
    # the uri on the proxy for the service
      uri: /
    # accessible as http://&amp;lt;proxy ip&amp;gt;/kibana
    - name: kibana
      port: 80
      uri: /kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be continued&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;resources:49d19ae450dab18d6578e10e73a07a91&#34;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/kubernetes/&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/services.md&#34;&gt;Kubernetes services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.haproxy.org/&#34;&gt;HAProxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/go-wiki/wiki/GithubCodeLayout&#34;&gt;GithubCodeLayout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>