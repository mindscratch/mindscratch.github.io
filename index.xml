<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>craigwickesser.com</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://craigwickesser.com/index.xml/</link>
    <language>en-us</language>
    <author>Craig Wickesser</author>
    <copyright>2015 Craig Wickesser</copyright>
    <updated>Fri, 23 Jan 2015 21:22:48 UTC</updated>
    
    
    
    
    <item>
      <title>Mindscratch Newsletter 1</title>
      <link>http://craigwickesser.com/2015/01/mindscratch-newsletter-1/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 UTC</pubDate>
      <author>Craig Wickesser</author>
      <guid>http://craigwickesser.com/2015/01/mindscratch-newsletter-1/</guid>
      <description>&lt;p&gt;On a regular basis, hopefully once per week, I&amp;rsquo;ll be posting links to
content related to distributed systems, programming and devops. If you&amp;rsquo;d prefer
to access this content via email, then &lt;a href=&#34;/subscribe&#34;&gt;subscribe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/Apache-Mesos-NYC-Meetup/events/219073804/&#34;&gt;http://www.meetup.com/Apache-Mesos-NYC-Meetup/events/219073804/&lt;/a&gt;
  - interesting b/c of  mention of running Accumulo on Mesos&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/ColleenLee1/iguaz-a-longrunning-job-scheduler-using-docker-and-mesos&#34;&gt;http://www.slideshare.net/ColleenLee1/iguaz-a-longrunning-job-scheduler-using-docker-and-mesos&lt;/a&gt;
  - job scheduler from corsera&lt;/p&gt;

&lt;p&gt;Docker security
&lt;a href=&#34;https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines&#34;&gt;https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines&lt;/a&gt;
&lt;a href=&#34;https://www.gartner.com/doc/2956826&#34;&gt;https://www.gartner.com/doc/2956826&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ExPHAT/twitter-sort&#34;&gt;https://github.com/ExPHAT/twitter-sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://am./chronos&#34;&gt;http://am./chronos&lt;/a&gt; &amp;ndash;master zk://server1:2181/mesos &amp;ndash;zk_hosts zk://server1:2181/mesos &amp;ndash;http_port 8080bari.apache.org/&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jpetazzo.github.io/2015/01/13/docker-mount-dynamic-volumes/&#34;&gt;http://jpetazzo.github.io/2015/01/13/docker-mount-dynamic-volumes/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://codeascraft.com/2015/01/14/introducing-statsd-jvm-profiler-a-jvm-profiler-for-hadoop/&#34;&gt;https://codeascraft.com/2015/01/14/introducing-statsd-jvm-profiler-a-jvm-profiler-for-hadoop/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go
Go Static Analysis Tools by Alan Donovan &lt;a href=&#34;https://vimeo.com/116108566&#34;&gt;https://vimeo.com/116108566&lt;/a&gt;
Benchmarking Go &lt;a href=&#34;https://vimeo.com/114975899&#34;&gt;https://vimeo.com/114975899&lt;/a&gt;
7 common mistakes in go and how to avoid them &lt;a href=&#34;https://vimeo.com/115776445&#34;&gt;https://vimeo.com/115776445&lt;/a&gt;
cancellation, context and plumbing &lt;a href=&#34;https://vimeo.com/115309491&#34;&gt;https://vimeo.com/115309491&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Io.js
&lt;a href=&#34;https://www.youtube.com/watch?v=DqMFX91ToLw&#34;&gt;https://www.youtube.com/watch?v=DqMFX91ToLw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ecmascript 7 async &amp;ndash; the evolution of javascript - &lt;a href=&#34;https://www.youtube.com/watch?v=DqMFX91ToLw&#34;&gt;https://www.youtube.com/watch?v=DqMFX91ToLw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://opensource.com/business/15/1/apache-spark-new-world-record&#34;&gt;http://opensource.com/business/15/1/apache-spark-new-world-record&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://events.linuxfoundation.org/events/vault/program/schedule?utm_source=lf&amp;amp;utm_medium=email&amp;amp;utm_campaign=vault15&#34;&gt;http://events.linuxfoundation.org/events/vault/program/schedule?utm_source=lf&amp;amp;utm_medium=email&amp;amp;utm_campaign=vault15&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;onyx: &lt;a href=&#34;https://www.youtube.com/watch?v=vG47Gui3hYE&#34;&gt;https://www.youtube.com/watch?v=vG47Gui3hYE&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    
    
    
    
    <item>
      <title>Go HTTP: Too Many Open Files</title>
      <link>http://craigwickesser.com/2015/01/golang-http-to-many-open-files/</link>
      <pubDate>Wed, 07 Jan 2015 18:26:39 EST</pubDate>
      <author>Craig Wickesser</author>
      <guid>http://craigwickesser.com/2015/01/golang-http-to-many-open-files/</guid>
      <description>&lt;p&gt;I recently had a situation where an application I was working on in &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; would
run into the &amp;ldquo;too many open files&amp;rdquo; error. After some debugging, I discovered
it wasn&amp;rsquo;t closing HTTP connections being made to an HTTP server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: It turns out, I was testing against &amp;ldquo;test&amp;rdquo; server which wasn&amp;rsquo;t
setting the &lt;code&gt;Connection: close&lt;/code&gt; header, therefore neither the client or
server was requesting the connection to be closed. If the server had set the
&lt;code&gt;Connection&lt;/code&gt; header, things would&amp;rsquo;ve been fine.&lt;/p&gt;

&lt;p&gt;The code looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  transport := &amp;amp;http.Transport {
    Proxy: http.ProxyFromEnvironment,
    Dial: (&amp;amp;net.Dialer{
      Timeout: 0,
      KeepAlive: 0
    }).Dial,
    TLSHandshakeTimeout: 10 * time.second
  }

  httpClient := &amp;amp;http.Client{Transport: transport}

  function submitData(url string, fileReader io.Reader) error {
    req, reqErr := http.NewRequest(&amp;quot;POST&amp;quot;, url, fileReader)
    if reqErr != nil {
      return reqErr
    }
    req.Header.Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/octet-stream&amp;quot;)

    resp, err := httpClient.Do(req)
    if err != nil {
      return err
    }
    defer resp.Body.Close()

    // read the body

    return nil
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;submitData&lt;/code&gt; function gets called over and over whenever new data needs to
be POSTed. Using &lt;a href=&#34;http://en.wikipedia.org/wiki/Netstat&#34;&gt;netstat&lt;/a&gt; I noticed the
connections to the server were staying &lt;code&gt;ESTABLISHED&lt;/code&gt; instead of being closed. I
set the &amp;ldquo;timeout&amp;rdquo; on the dialer to 0, because the POST should block until the
server is done and responds (which is an undetermined amount of time).&lt;/p&gt;

&lt;p&gt;I know the server is responding, because the code that processes the response
was in fact getting data.&lt;/p&gt;

&lt;p&gt;It turns out, HTTP/1.1 uses persistent connections by default:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A significant difference between HTTP/1.1 and earlier versions of HTTP is that persistent connections are the default behavior of any HTTP connection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;cite&gt;&lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html&#34;&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;The solution was to inform the server that the client wants to close the connection
after the transaction is complete. This can be done by setting the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection&#34;&gt;Connection&lt;/a&gt;
header,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;req.Header.Set(&amp;quot;Connection&amp;quot;, &amp;quot;close&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or by setting the &lt;code&gt;Close&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; on the &lt;a href=&#34;http://golang.org/pkg/net/http/#Request&#34;&gt;http.Request&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;req.Close = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After doing that, the &amp;ldquo;too many open files&amp;rdquo; issue went away as the program was
no longer keeping HTTP connections open and thus not using up file descriptors.&lt;/p&gt;
</description>
    </item>
    
    
    
    
    
    
    
    
    
    
  </channel>
</rss>